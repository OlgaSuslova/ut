https://github.com/AlermGB/Unit-tests/tree/d823c56d9102fa9f495b2a254dfa091a8a53aeba/src/main/java/ht6

Задание № 1
Представьте, что вы работаете над разработкой простого приложения для записной книжки, которое позволяет пользователям добавлять, редактировать и удалять контакты. Ваша задача - придумать как можно больше различных тестов (Unit-тесты, интеграционные тесты, сквозные тесты) для этого приложения. Напишите название каждого теста, его тип и краткое описание того, что этот тест проверяет.

Unit-тесты:
getPhoneBook - проверка метода класса возвращения единственного экземпляра записной книжки.
addContact - проверка метода класса добавления нового контакта в записную книжку.
deleteContact - проверка метода класса удаления контакта из записной книжки.
getContactById - проверка метода класса получения контакта по его id.
getAllContacts - проверка метода класса получения списка всех контактов.
editContact - проверка метода класса редактирования контакта.
Интеграционные тесты:
getRecord - проверка получения записи из базы данных методом класса записной книжки.
removeRecord - проверка удаления записи из базы данных после удаления контакта из записной книжки.
createRecord - проверка создания записи в базе данных после создания нового контакта в записной книжке.
editRecord - проверка верности редактирования атрибутов в базе данных, после сохранения изменений в объекте класса.
showAllContacts - проверка отображения всего списка контактов в интерфейсе приложения.
showContactListAfterDel - проверка отображения списка контактов в интерфейсе после удаления контакта.
showContactListAfterCreate - проверка отображения списка контактов в интерфейсе после добавления контакта.
Сквозные тесты:
createNewContactInUIToDataBase - проверка функционала по добавлению нового контакта из интерфейса приложения и его сохранению в базу.
Задание № 2
Ниже список тестовых сценариев. Ваша задача - определить тип каждого теста (Unit-тест, интеграционный тест, сквозной тест) и объяснить, почему вы так решили.

Проверка того, что функция addContact корректно добавляет новый контакт в список контактов.
Это Unit-тест, потому что проверяется правильность работы ОДНОГО метода экземпляра класса.

Проверка того, что при добавлении контакта через пользовательский интерфейс, контакт корректно отображается в списке контактов.
Это сквозной тест, потому что проверяется весь цикл работы продукта от интерфейса пользователя до бизнес логики и обратно к интерфейсу пользователя.

Проверка полного цикла работы с контактом: создание контакта, его редактирование и последующее удаление.
Это интеграционноый тест, потому что проверяется работа между несколькими компанентами логики.